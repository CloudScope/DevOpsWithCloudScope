TASK - 1:

Generate a client certificate for the user dev-user. Create a private key and a certificate signing request (CSR) for the dev-user.
Sign the CSR with the Kubernetes CA to generate the client certificate.

TASK - 2:

Configure the Kubeconfig file to use the new user. Update the Kubeconfig file to include the user dev-user and set the context to use this user.

TASK - 3:

Verify authentication. Use the new Kubeconfig file to interact with the cluster and verify that dev-user can authenticate by listing the nodes in the cluster.

Ans:

openssl genrsa -out dev-user.key 2048

openssl req -new -key dev-user.key -out dev-user.csr -subj "/CN=dev-user/O=dev-group"

CSR_CONTENT=$(cat dev-user.csr | base64 -w 0 )

LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ2JEQ0NBVlFDQVFBd0p6RVJNQThHQTFVRUF3d0laR1YyTFhWelpYSXhFakFRQmdOVkJBb01DV1JsZGkxbgpjbTkxY0RDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS1NXaE91OUhUamVuSE5VCkhVUkxpejZSQnlBM2xOU0pFZmNiSUZGSmdMZmRvbkQxampNYm0xeHY2NXJwZmpuaHNIZWVOWkdwK0NkWGVqQUcKazFHMUZqdk1DR3JSdkM1K2E3aklqaWVONlVTbENPRnIrZjQyZkhBdnNIMHJ4bVVXOUN3SHZYaHZ6U0p5Nk9JTAo1cXlCODZLQ2hRc1l1bEpPOCt5YUJVcHg4L1VXanZzb09mZzhpREtXSFB1V0pONG53Q2p6aW5Bd0xIZ3BOSGtDCjVYb09jZ05ueVA1N3VIZHVRV2xRMjk1U3k2bk5qTVdZQUZob2NaUVpTOXo2NGdxZFFSNEZzTURmeE9RR0Iwa0gKVDlwbk85MkVHK0pUWFdhWFNTMGFEbHJoZENveXByR1FvZFcwUHdIWGhjNmVrNHd0ZFN3N3JEMjF3ZzY2TWM5RwpLbGczSXIwQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBcFI1ZVFKZjFab0tDc3phVUtzZmFkCkZPbko0V3YrLzczYUhLdnJJS1RYZk9pNVd1Rkg4d210aEttdVFpQ1QxY0V0NHdmSThxR05iMGllWFhNUXpISDMKZG90WHZ3K2pXeGxFclhZdDIzREI1RmVOc2p4d2ZuRGRGcVl4ZWFMaWFCSGUrOXRZYVBZY2xYdVdWeTFWUzdmZwo1MmpnYk5jajd6ZThCYmMySDJkYWN2d3UvYkNnbUlTcWttQS9qcU43b3JVNnJaUmdNSTFMWmZjanlGSzVQUlFSCm5BeGh1V2tUTmlSYm9aWGgyTVRaNE5Ib3ltcnpkZmFLbmljaHAxbFZzdDd5Q1VWeHdWNEwzb1VtWkw0OUlzTTQKT1NuK1ZWQmlLOVVmZk1pMlpYdFRrYzhqQ2VqMVdSMnN2T0lmYkZ0VndSYzRJUzAzWDB6OUpOaVhQUlNLVVAzbAotLS0tLUVORCBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0K
vi csr.yaml

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: dev-user-csr
spec:
  signerName: kubernetes.io/kube-apiserver-client
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ2JEQ0NBVlFDQVFBd0p6RVJNQThHQTFVRUF3d0laR1YyTFhWelpYSXhFakFRQmdOVkJBb01DV1JsZGkxbgpjbTkxY0RDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS1NXaE91OUhUamVuSE5VCkhVUkxpejZSQnlBM2xOU0pFZmNiSUZGSmdMZmRvbkQxampNYm0xeHY2NXJwZmpuaHNIZWVOWkdwK0NkWGVqQUcKazFHMUZqdk1DR3JSdkM1K2E3aklqaWVONlVTbENPRnIrZjQyZkhBdnNIMHJ4bVVXOUN3SHZYaHZ6U0p5Nk9JTAo1cXlCODZLQ2hRc1l1bEpPOCt5YUJVcHg4L1VXanZzb09mZzhpREtXSFB1V0pONG53Q2p6aW5Bd0xIZ3BOSGtDCjVYb09jZ05ueVA1N3VIZHVRV2xRMjk1U3k2bk5qTVdZQUZob2NaUVpTOXo2NGdxZFFSNEZzTURmeE9RR0Iwa0gKVDlwbk85MkVHK0pUWFdhWFNTMGFEbHJoZENveXByR1FvZFcwUHdIWGhjNmVrNHd0ZFN3N3JEMjF3ZzY2TWM5RwpLbGczSXIwQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBcFI1ZVFKZjFab0tDc3phVUtzZmFkCkZPbko0V3YrLzczYUhLdnJJS1RYZk9pNVd1Rkg4d210aEttdVFpQ1QxY0V0NHdmSThxR05iMGllWFhNUXpISDMKZG90WHZ3K2pXeGxFclhZdDIzREI1RmVOc2p4d2ZuRGRGcVl4ZWFMaWFCSGUrOXRZYVBZY2xYdVdWeTFWUzdmZwo1MmpnYk5jajd6ZThCYmMySDJkYWN2d3UvYkNnbUlTcWttQS9qcU43b3JVNnJaUmdNSTFMWmZjanlGSzVQUlFSCm5BeGh1V2tUTmlSYm9aWGgyTVRaNE5Ib3ltcnpkZmFLbmljaHAxbFZzdDd5Q1VWeHdWNEwzb1VtWkw0OUlzTTQKT1NuK1ZWQmlLOVVmZk1pMlpYdFRrYzhqQ2VqMVdSMnN2T0lmYkZ0VndSYzRJUzAzWDB6OUpOaVhQUlNLVVAzbAotLS0tLUVORCBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0K
  usages:
  - client auth

kubectl apply -f csr.yaml

kubectl certificate approve dev-user-csr

kubectl get csr dev-user-csr -o jsonpath='{.status.certificate}' | base64 --decode > dev-user.crt

sudo kubectl config set-credentials dev-user --client-certificate=dev-user.crt --client-key=dev-user.key

sudo kubectl config set-context dev-user-context --cluster=default --user=dev-user


sudo kubectl config use-context dev-user-context

sudo chown $(whoami) /etc/rancher/k3s/k3s.yaml

sudo chmod u+rw /etc/rancher/k3s/k3s.yaml


Q2. Kubernetes Class 5 Assignment 2

Objective:

The DevOps team needs to implement Role-Based Access Control for the default.

TASK - 1:

Create a Role named pod-reader in the default namespace.

The Role should have permission to get, watch, and list pods.

TASK - 2:

Create a RoleBinding to bind the pod-reader Role to the default.

TASK - 3:

Verify that the default can list pods in the default namespace but cannot perform other actions, such as creating or deleting pods.


Ans:

vi role.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: default
subjects:
- kind: User
  name: default
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io

kubectl apply -f role.yaml

kubectl auth can-i list pods --as=dev-user --namespace=default


Q3. Kubernetes Class 5 Assignment 3

Objective:

The DevOps team needs to enforce security contexts for pods to ensure they run with limited privileges.

TASK -1:

Create a Pod in the default namespace with the following security context. The Pod should use the nginxinc/nginx-unprivileged:latest image. Set the security context to disable privilege escalation and ensure the container runs as a non-root user.

TASK - 2:

Verify that the Pod is running with the specified security context by checking the Pod's details.

Ans:

vi secure-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: secure-nginx-pod
spec:
  containers:
  - name: nginx
    image: nginxinc/nginx-unprivileged:latest
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true

kubectl apply -f secure-pod.yaml

kubectl get pod secure-nginx-pod -o jsonpath=’{.spec.containers[0].securityContext}’



Q4. Kubernetes Class 5 Assignment 4

TASK - 1:

Create a ClusterRole named cluster-admin-role with administrative permissions. The ClusterRole should include permissions to manage all resources across all namespaces.

TASK - 2:

Create a ClusterRoleBinding to bind the cluster-admin-role to default.

TASK - 3:

Verify that the default can perform administrative actions such as creating a new namespace.

Ans:

vi role.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-admin-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admin-binding
subjects:
- kind: User
  name: default
roleRef:
  kind: ClusterRole
  name: cluster-admin-role
  apiGroup: rbac.authorization.k8s.io

kubectl apply -f role.yaml




