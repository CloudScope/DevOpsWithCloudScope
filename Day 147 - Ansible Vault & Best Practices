Q1. Basic Encryption

Assignment 1: Basic Encryption
Objective: Master the fundamentals of creating and managing encrypted files.
Tasks:
Create a plaintext file personal_info.yml with the following data:
name: John Doe
address: 123 Elm St
phone: 555-1234
Encrypt this file using Ansible Vault and set up a password file named vault_password.txt.

Set Vault password as hello@123!

Ans:

$ vi personal_info.yml
name: John Doe
address: 123 Elm St
phone: 555-1234

$ echo "hello@123!" > vault_password.txt

$ ansible-vault encrypt personal_info.yml --vault-password-file vault_password.txt

Q3. Ansible Class 5 Assignment 3

Implementing Ansible Vault in an Ansible Role
Objective:
Enhance security by integrating Ansible Vault into an Ansible role to manage server configurations securely.

NOTE: Password for vault is vault@123!

Description:
You will create a role named configure_server using ansible-galaxy to encapsulate server settings. This role will utilize an encrypted file, server_configs.yml, to store sensitive configuration data securely using Ansible Vault. The process involves creating the role, encrypting the configuration file, and then using this encrypted data within a playbook that implements the role.

Tasks:
Create the configure_server role to organize and manage server configurations.

Encrypt configuration data using Ansible Vault to secure sensitive settings within in server_configs.yml in /home/user/configure_server/vars directory. The admin_user is admin and admin_password is supersecretpassword

Setup task file (tasks/main.yml): Write tasks in this file to utilize the encrypted variables for configuring the server, such as setting up user accounts or adjusting settings based on secure information.

---
- name: Print encrypted admin password
  debug:
    msg: "Encrypted password is: {{ admin_password }}"
Develop a playbook that uses the configure_server role, ensuring it can decrypt and apply the encrypted configurations during execution.

This is the description and format of playbook file:

hosts: Specifies that the playbook runs on the localhost.
connection: Uses a local connection type, meaning Ansible will execute this playbook on the local machine without SSH.
become: Set to no to indicate that privilege escalation is not required.
roles: Includes the configure_server role you previously created. This role should contain all necessary tasks to configure your server using settings from the encrypted vars file.
vars_files: Lists the paths to variable files that contain encrypted data. Here, it points to the encrypted server_configs.yml in your role directory. This file should be decrypted at runtime using Ansible Vault.
To run the playbook use this :

<command-to-run-ansible-playbook> <playbook yaml file name> --vault-password-file /tmp/.vault_pass.txt >> output.txt

Ans:

1. Create the configure_server Role

ansible-galaxy init /home/user/configure_server

2. Create and Encrypt server_configs.yml

cd /home/user/configure_server/vars
vi server_configs.yml
admin_user: admin
admin_password: supersecretpassword

Encrypt the file using Ansible Vault:

# vi vault.txt
vault@123!

ansible-vault encrypt server_configs.yml --vault-password-file=vault.txt

3. Define Tasks in tasks/main.yml

vi /home/user/configure_server/tasks/main.yml:

---
- name: Print encrypted admin password
  debug:
    msg: "The encrypted variable is {{ admin_password }}"

- name: Create an admin user
  user:
    name: "{{ admin_user }}"
    password: "{{ admin_password | password_hash('sha512') }}"
    state: present

4. Create the Playbook (configure_server.yml)

vi /home/user/configure_server.yml:

---
- name: Configure the server using an encrypted role
  hosts: localhost
  connection: local
  become: yes

  roles:
    - configure_server

  vars_files:
    - /home/user/configure_server/vars/server_configs.yml

5. Run the Playbook

sudo chown user:user output.txt
ansible-playbook /home/user/configure_server.yml --vault-password-file vault.txt | tee /home/user/output.txt  ##vault@123!

Q4. Ansible Class 5 Assignment 4

Objective: Handle vault passwords dynamically for different environments.

Tasks:

Create two encrypted files, dev_secrets.yml and prod_secrets.yml, each with a separate password and password for dev_secrets.yml is dev@1234 and for prod it is prod@1234. You can add variables inside these files. for dev_secrets.yml:
Name of variable is db_password and value is developmentPassword


for prod_secrets.yml:

Name of variable is db_password db_password and value is productionPassword
Write a playbook that includes a prompt for the user to specify which environment (development or production) to run tasks for, using the corresponding secrets file.
Use a conditional statement in the playbook to determine which vault password file to use based on the user's input.

Ans:

# echo "dev@123!" > /home/user/dev_vault_password.txt
# echo "prod@123!" > /home/user/prod_vault_password.txt
# chmod 600 /home/user/dev_vault_password.txt /home/user/prod_vault_password.txt


# ansible-vault create dev_secrets.yml --vault-password-file=/home/user/dev_vault_password.txt
db_password: developmentPassword

# ansible-vault create prod_secrets.yml --vault-password-file=/home/user/prod_vault_password.txt
db_password: productionPassword


vi playbook.yml
---
- name: Handle dynamic vault passwords
  hosts: localhost
  gather_facts: no
  vars_prompt:
    - name: env_type
      prompt: "Enter the environment (development/production)"
      private: no

  tasks:
    - name: Include the correct vault file
      ansible.builtin.include_vars:
        file: "{{ 'dev_secrets.yml' if env_type == 'development' else 'prod_secrets.yml' }}"
      when: env_type in ['development', 'production']

    - name: Display the database password
      debug:
        msg: "Database password is {{ db_password }}"
      when: env_type in ['development', 'production']

    - name: Fail if the environment is incorrect
      fail:
        msg: "Invalid environment specified!"
      when: env_type not in ['development', 'production']

# ansible-playbook /home/user/playbook.yml --vault-password-file /home/user/dev_vault_password.txt --extra-vars "env_type=development"

# ansible-playbook /home/user/playbook.yml --vault-password-file /home/user/prod_vault_password.txt --extra-vars "env_type=production"


Q5. Ansible Class 5 Assignment 5

Problem Statement
The playbook will manage several tasks:

Directory Creation: Ensures a specific directory exists where the Python script will be stored.
File Deployment: Copies the Python script to the specified directory.
Script Execution: Executes the Python script using an environment variable to pass data.
Output Management: Captures and displays the output from the Python script.
Directory Structure
Your project should have a structured directory to organize the Ansible playbook, roles, and the Python script. Here’s the suggested structure:

/home/user
|-- roles/
|   |-- greet/
|       |-- tasks/
|           |-- main.yml
|-- greet.py
|-- greet.yml
Sample greet.py
# File: greet.py
import os

def main():
    # Retrieve the USER_NAME from an environment variable, defaulting to "World"
    user_name = os.getenv("USER_NAME", "World")
    # Print a customized greeting message
    print(f"Hello, {user_name}!")

if __name__ == "__main__":
    main()
Creating the Role (roles/greet/tasks/main.yml)
The role contains all the tasks necessary to deploy and run your script:

Steps to Create roles/greet/tasks/main.yml
1. Create a Directory
This task ensures that a specific directory exists on the localhost where the Python script will be stored. If the directory does not exist, Ansible will create it.

Path: /usr/local/app — The directory where the script will be placed.
Permissions: Set to 0755 to allow the script owner to read, write, and execute within the directory, while others can only read and execute.
- name: Ensure the application directory exists
  file:
    path: "/usr/local/app"
    state: directory
    mode: '0755'
2. Copy the Script
This task copies the greet.py script from the Ansible control machine to the localhost. In this scenerio, we are using localhost only. It ensures that the script is placed in the previously created directory.

Source: The location of greet.py is the /home/user.
Destination: You need to copy greet.py inside /usr/local/app directory.
Permissions: Set to 0755, allowing the script to be executed by the owner and read/executed by others, ensuring that the script can be run securely.
3. Execute the Script
This task executes the greet.py script on the localhost. It uses an environment variable to pass a username to the script, which the script uses to customize its output.

Command: The command to run the Python script.
Environment Variable: USER_NAME is set dynamically through the playbook and is used by the script to customize the greeting.
Output Registration: Captures the output of the script for further use or debugging. The name of the register is greet_output.
4. Handle the Output
After the script is executed, this task displays the output captured from the script. This is useful for debugging and verifying that the script ran as expected.

Debug Module: Used to print the output of the script to the Ansible console/log.
Task-2: Create the greet.yml playbook in /home/user.
In this YAML, ensure to mention:

Hosts: localhost
Permissions: Use become: yes
Variables: Define user_name as alice.
Roles: Include greet
Execution
Run the playbook using the following command from your Ansible control machine:

ansible-playbook greet.yml -K

Ans:

mkdir -p /home/user/roles/greet/tasks
---
- name: Ensure the application directory exists
  file:
    path: "/usr/local/app"
    state: directory
    mode: '0755'
- name: Copy file
  copy:
    src: "/home/user/greet.py"
    dest: "/usr/local/app/greet.py"
    mode: '0755'

- name: Run script
  command: python3 /usr/local/app/greet.py
  environment:
    USER_NAME: "{{ user_name }}"
  register: greet_output

- name: Print output
  debug:
    msg: "{{ greet_output.stdout }}"


----
user@01f01b040c47:~$ cat greet.yml
---
- hosts: localhost
  become: yes
  vars:
    user_name: alice
  roles:
    - greet

---

user@01f01b040c47:~$ cat greet.py
import os

def main():
    # Retrieve the USER_NAME from an environment variable, defaulting to "World"
    user_name = os.getenv("USER_NAME", "World")
    # Print a customized greeting message
    print(f"Hello, {user_name}!")

if __name__ == "__main__":
    main()


ansible-playbook greet.yml -K > output.txt
