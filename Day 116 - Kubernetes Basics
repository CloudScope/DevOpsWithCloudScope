Q1. Kubernetes Namespace

Get familiar with the Kubernetes environment and understand Kubectl CLI. For this assignment, your task is to list all the namespaces in the cluster and store them in /home/user/answer.txt file.
Tip: Store only the name of namespace and no other information.
Ans:

kubectl get ns --no-headers -o custom-columns=":metadata.nacustom-columns=":metadata.name" > /home/user/answer.txt

Q2. Pods in Kubernetes

Objective

This assignment aims to demonstrate an understanding of Pods in Kubernetes by creating and managing Pods using kubectl. You will create a multi-container Pod and deploy a simple application with a main application container and a logging sidecar container.

TASK 1: Create a Namespace

Create a new Namespace called assignment-namespace using yaml. Verify that the Namespace is created successfully.

TASK 2: Create a Multi-Container Pod

Define a Pod in a YAML file multi-container-pod.yaml with the following specifications:

- The Pod should be named web-server-pod.
- It should run in the assignment-namespace.
- The Pod should include two containers:
-> nginx-container: Runs the nginx image and exposes port 80.
-> log-sidecar: Runs the busybox image with a command to tail the nginx access log file.
- Both containers store the log files using a shared volume emptyDir.
- Apply the YAML file to create the Pod.

TASK 3: Verify Pod Creation

Use kubectl commands to verify that the Pod is running correctly. Check the status of the containers within the Pod.

TASK 4: Access the Nginx Application

Use kubectl port-forward to access the Nginx application running in the nginx-container from your local machine. Verify that you can access the Nginx welcome page by making a curl request to http://localhost:<forwarded-port>.

TASK 5: View Logs from the Log Sidecar

Use kubectl logs to view the logs generated by the log-sidecar container. Verify that the logs contain access logs from the Nginx application.

Ans:

vi namespace.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: assignment-namespace

kubectl apply -f namespace.yaml

vi multi-container-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: web-server-pod
  namespace: assignment-namespace
spec:
  volumes:
    - name: shared-logs
      emptyDir: {}
  containers:
    - name: nginx-container
      image: nginx
      ports:
      - containerPort: 80
      volumeMounts:
      - name: shared-logs
        mountPath: /var/log/nginx
    - name: log-sidecar
      image: busybox
      args: ["/bin/sh", "-c", "tail -f /var/log/nginx/access.log"]
      volumeMounts:
      - name: shared-logs
        mountPath: /var/log/nginx

kubectl apply -f multi-container-pod.yaml

kubectl get pods -n assignment-namespace
kubectl describe pod web-server-pod -n assignment-namespace

kubectl port-forward pod/web-server-pod 8080:80 -n assignment-namespace

kubectl logs web-server-pod -c log-sidecar -n assignment-namespace
