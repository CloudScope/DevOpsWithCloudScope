Q1. Top 5 popular movies

Context:

Acme Studios, a major Hollywood production company, maintains a vast movie database. This database tracks information about movies they've produced, including titles, directors, taglines, and a popularity metric. Understanding movie popularity is crucial for Acme Studios to identify audience preferences and make informed decisions about future productions. By analyzing the most popular movies, streaming services can refine their recommendations and negotiate better content deals.

Problem Statement:

To gain insights into audience tastes, Acme Studios wants to identify the most popular movies in their database. This can be achieved by analyzing the "popularity" field within the "movies" table.

Write a query to find the movie titles, taglines, and directors for the top 5 popular movies.

Result:

Return the columns 'original_title', 'tagline', and 'director'.

Dataset description for movies table:

1) id - tmdb movie id

2) imdb_id - imdb movie id

3) popularity -A numeric quantity specifying the movie's popularity.

4) budget -The budget in which the movie was made.

5) revenue - The worldwide revenue generated by the movie.

6) original_title- The title of the movie

7) cast - The name of the lead and supporting actors.

8) homepage - A link to the homepage of the movie.

9) director - The name of the director of the movie

10) tagline - Movie's tagline.

11) keywords -The keywords or tags related to the movie.

12) overview -A brief description of the movie.

13) runtime -The running time of the movie in minutes.

14) genres -The genres of the movies

15) production_companies-The production house of the movie.

16) release_date -the date on which it was released.

17) vote_count -the count of votes received.

18) vote_average - average ratings the movie received.

19) release_year - the year on which it was released.

Ans:

STEP 1: Select the columns original_title, tagline, and director from the table movies.

select original_title, tagline, director from movies;

STEP 2: Order the column popularity in descending order to get the highest to lowest popularity.

select original_title, tagline, director from movies order by popularity desc;

STEP 3: Use the limit to display only the top 5 popular movies.

select original_title, tagline, director 
from movies 
order by popularity desc 
limit 5;


Q2. Keywords
Context:

Acme Studios, a major Hollywood production company, maintains a vast movie database that tracks detailed information about their films, including genres, keywords, and cast. Understanding audience preferences for specific movie categories is crucial for informing production decisions and marketing strategies.

You are a data analyst at Acme Studios. Your manager has asked you to compile a list of all movies that contain the keywords 'sport', 'sequel', or 'suspense'. This data will be used to tailor marketing strategies and recommend relevant content to viewers.

Problem Statement:

Write a query to list down all the movies along with their details that have keywords like 'sport' or 'sequel' or 'suspense'.

Result:

Return the columns 'original_title', 'director', 'genres', 'cast', 'budget', 'revenue', 'runtime', and 'vote_average'.
Return the columns ordered by original_title in ascending order.
Dataset description for 'movies' table:

id - tmdb movie id
imdb_id - imdb movie id
popularity - A numeric quantity specifying the movie popularity.
budget - The budget in which the movie was made.
revenue - The worldwide revenue generated by the movie.
original_title - The title of the movie
cast - The name of the lead and supporting actors.
homepage - A link to the homepage of the movie.
director - The name of the director of the movie
tagline - Movie tagline.
keywords - The keywords or tags related to the movie.
overview - A brief description of the movie.
runtime - The running time of the movie in minutes.
genres - The genres of the movies
production_companies - The production house of the movie.
release_date - the date on which it was released.
vote_count - the count of votes received.
vote_average - average ratings the movie received.
release_year - the year in which it was released.

Ans:
SELECT 
 original_title, 
 director, 
 genres, cast, budget, revenue, runtime, vote_average 
FROM movies 
WHERE
 keywords LIKE '%sport%' OR 
 keywords LIKE '%sequel%' OR 
 keywords LIKE '%suspense%'
ORDER BY original_title;

Q3. 2012-2015

Problem Statement:

Find the details of the movies that are released between the years 2012-2015 i.e., (Including 2012 and 2015).

Return the columns 'original_title', 'genres', 'vote_average', and 'revenue'.
Return the result ordered by original_title in ascending order.
Dataset description for movies table:

1) id - tmdb movie id

2) imdb_id - imdb movie id

3) popularity -A numeric quantity specifying the movie's popularity.

4) budget -The budget in which the movie was made.

5) revenue - The worldwide revenue generated by the movie.

6) original_title- The title of the movie

7) cast - The name of the lead and supporting actors.

8) homepage - A link to the homepage of the movie.

9) director - The name of the director of the movie

10) tagline - Movie's tagline.

11) keywords -The keywords or tags related to the movie.

12) overview -A brief description of the movie.

13) runtime -The running time of the movie in minutes.

14) genres -The genres of the movies

15) production_companies-The production house of the movie.

16) release_date -the date on which it was released.

17) vote_count -the count of votes received.

18) vote_average - average ratings the movie received.

19) release_year - the year on which it was released.

Ans:

STEP 1: Select the columns original_title, genres, vote_average, and revenue from the movies table.

select original_title, genres, vote_average, revenue from movies;

Approach 1:

STEP 2: Use the where clause and filter the records based on the column release_year that are released between 2012 - 2015.

select original_title, genres, vote_average, revenue 
from movies 
where release_year >= 2012 and 
release_year <= 2015
order by original_title;
Approach 2:

STEP 2: Use the â€˜betweenâ€™ operator in the where clause and filter the records based on the column release_year that are released between 2012 - 2015.

select original_title, genres, vote_average, revenue 
from movies 
where release_year
between 2012 and 2015
order by original_title;

Q4. Article Views 1
Write an SQL query to find all the authors that viewed at least one of their own articles.

Return the result table sorted by id in ascending order.

Ans:
SELECT DISTINCT viewer_id AS id
FROM views
WHERE viewer_id = author_id
ORDER BY id;
