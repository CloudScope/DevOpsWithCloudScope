Q1. EKS Cluster Provisioning and Kubectl Configuration

Problem Description
You need to provision a complete Amazon EKS environment in us-west-2, using only the default VPC, default subnets, and public IP access mode:

Create IAM Roles
Cluster Role named EKSClusterRole for EKS use case EKS - Auto Cluster

Attach managed policies:

AmazonEKSClusterPolicy

AmazonEKSNetworkingPolicy

AmazonEKSBlockStoragePolicy

AmazonEKSComputePolicy

AmazonEKSLoadBalancingPolicy

Node Role named EKSNodeRole for EC2

Attach managed policies:

AmazonEC2ContainerRegistryPullOnly

AmazonEC2ContainerRegistryReadOnly

AmazonEKS_CNI_Policy

AmazonEKSWorkerNodePolicy

Create the EKS Cluster
Mode: Manual Configuration

Name: lab-eks-<ACCOUNT_ID>

VPC: Default VPC, default subnets

Cluster Network Access: Public

Cluster IAM Role: Select the IAM role EKSClusterRole created earlier.

Add-ons: only Amazon VPC CNI and kube-proxy

Create a Managed Node Group
Name: lab-ng-<ACCOUNT_ID>

Cluster: lab-eks-<ACCOUNT_ID>

IAM role: EKSNodeRole

Instance type: t3.micro and on-demand

Scaling: Min = 1, Desired = 2, Max = 3

Subnets: default subnets

Configure kubectl Context
Before running anything first do sudo su and put password user@123! and then run the commands:

aws eks update-kubeconfig --region us-west-2 --name lab-eks-<ACCOUNT_ID>
replace with original Account-ID of the AWS account


Ans:

#!/bin/bash
set -e
REGION="us-west-2"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region $REGION)
VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query "Vpcs[0].VpcId" --output text)
SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=default-for-az,Values=true" --query "Subnets[].SubnetId" --output text --region $REGION | sed 's/[[:space:]]/,/g')


# 1) Create EKSClusterRole
aws iam create-role --role-name EKSClusterRole --assume-role-policy-document file://<(cat <<EOF
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"eks.amazonaws.com"},"Action":"sts:AssumeRole"}]}
EOF
)

aws iam create-role \
  --role-name EKSClusterRole \
  --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "eks.amazonaws.com"
        },
        "Action": [
          "sts:AssumeRole",
          "sts:TagSession"
        ]
      }
    ]
  }'

aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

# 2) Create EKSNodeRole
aws iam create-role --role-name EKSNodeRole --assume-role-policy-document file://<(cat <<EOF
{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]}
EOF
)
for policy in \
  AmazonEC2ContainerRegistryPullOnly \
  AmazonEC2ContainerRegistryReadOnly \
  AmazonEKS_CNI_Policy \
  AmazonEKSWorkerNodePolicy; do
  aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/$policy
done

# 3) Create EKS cluster
aws eks create-cluster \
  --region $REGION \
  --name lab-eks-${ACCOUNT_ID} \
  --role-arn arn:aws:iam::${ACCOUNT_ID}:role/EKSClusterRole \
  --resources-vpc-config subnetIds=[$SUBNETS],endpointPublicAccess=true,endpointPrivateAccess=false \
  --kubernetes-version 1.33

aws eks wait cluster-active --region $REGION --name lab-eks-${ACCOUNT_ID}

# 4) Install add-ons
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name vpc-cni
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name kube-proxy

# 5) Create node group

aws eks create-nodegroup \
  --region $REGION \
  --cluster-name lab-eks-${ACCOUNT_ID} \
  --nodegroup-name lab-ng-${ACCOUNT_ID} \
  --node-role arn:aws:iam::${ACCOUNT_ID}:role/EKSNodeRole \
  --subnets $SUBNET_IDS \
  --instance-types t3.micro \
  --scaling-config minSize=1,maxSize=3,desiredSize=2

aws eks wait nodegroup-active \
  --region $REGION \
  --cluster-name lab-eks-${ACCOUNT_ID} \
  --nodegroup-name lab-ng-${ACCOUNT_ID}

# 6) Update kubeconfig
aws eks update-kubeconfig --region $REGION --name lab-eks-${ACCOUNT_ID}

echo "EKS cluster, node group, and kubeconfig are ready."



Q2. Full EKS Provisioning + NGINX App Deployment

Problem Description
You will provision a complete Amazon EKS environment in us-west-2 using only the default VPC, default subnets, and public IP access mode, then deploy and expose a simple NGINX application.

Tasks:
IAM Roles
Cluster Role EKSClusterRole for EKS use case EKS - Cluster

Attach managed policies:

AmazonEKSClusterPolicy

AmazonEKSNetworkingPolicy

AmazonEKSBlockStoragePolicy

AmazonEKSComputePolicy

AmazonEKSLoadBalancingPolicy

Node Role EKSNodeRole for EC2

Attach managed policies:

AmazonEC2ContainerRegistryPullOnly

AmazonEC2ContainerRegistryReadOnly

AmazonEKS_CNI_Policy

AmazonEKSWorkerNodePolicy

EKS Cluster Creation
Mode: Manual Configuration

Name: lab-eks-<ACCOUNT_ID>

VPC: Default VPC, default subnets

Cluster endpoint access: Public

Add-ons: Amazon VPC CNI and kube-proxy

Managed Node Group
Name: lab-ng-<ACCOUNT_ID>

Cluster: lab-eks-<ACCOUNT_ID>

IAM role: EKSNodeRole

Instance type: t3.micro and on-demand

Scaling: Min = 1, Desired = 2, Max = 3

Subnets: default

Configure kubectl
Before running anything first do sudo su and put password user@123! and then run the commands:

aws eks update-kubeconfig --region us-west-2 --name lab-eks-<ACCOUNT_ID>
Create & Deploy NGINX
Write nginx-deployment.yaml (1-replica Deployment):
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.25
        ports:
        - containerPort: 80
use this to apply kubectl apply -f nginx-deployment.yaml

Write nginx-service.yaml (LoadBalancer Service)

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
use this to apply kubectl apply -f nginx-service.yaml

Check the service and get the external IP:

kubectl get svc nginx-service

Ans:


#!/bin/bash
set -e

REGION="us-west-2"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region $REGION)
VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query "Vpcs[0].VpcId" --output text)
SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=default-for-az,Values=true" --query "Subnets[].SubnetId" --output text --region $REGION | sed 's/[[:space:]]/,/g')

# 1. Create EKSClusterRole
aws iam create-role --role-name EKSClusterRole \
  --assume-role-policy-document file://<(cat <<EOF
{ "Version":"2012-10-17", "Statement":[{ "Effect":"Allow", "Principal":{ "Service":"eks.amazonaws.com" }, "Action":"sts:AssumeRole" }] }
EOF
)
aws iam attach-role-policy --role-name EKSClusterRole \
  --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

# 2. Create EKSNodeRole
aws iam create-role --role-name EKSNodeRole \
  --assume-role-policy-document file://<(cat <<EOF
{ "Version":"2012-10-17", "Statement":[{ "Effect":"Allow", "Principal":{ "Service":"ec2.amazonaws.com" }, "Action":"sts:AssumeRole" }] }
EOF
)
for POLICY in \
  AmazonEC2ContainerRegistryPullOnly \
  AmazonEC2ContainerRegistryReadOnly \
  AmazonEKS_CNI_Policy \
  AmazonEKSWorkerNodePolicy; do
  aws iam attach-role-policy --role-name EKSNodeRole \
    --policy-arn arn:aws:iam::aws:policy/$POLICY
done

# 3. Create EKS cluster
aws eks create-cluster \
  --region $REGION \
  --name lab-eks-${ACCOUNT_ID} \
  --role-arn arn:aws:iam::${ACCOUNT_ID}:role/EKSClusterRole \
  --resources-vpc-config subnetIds=[$SUBNET_IDS],endpointPublicAccess=true,endpointPrivateAccess=false \
  --kubernetes-version 1.33

aws eks wait cluster-active --region $REGION --name lab-eks-${ACCOUNT_ID}

# 4. Install add-ons
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name vpc-cni
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name kube-proxy

# 5. Create node group

aws eks create-nodegroup \
  --region $REGION \
  --cluster-name lab-eks-${ACCOUNT_ID} \
  --nodegroup-name lab-ng-${ACCOUNT_ID} \
  --node-role arn:aws:iam::${ACCOUNT_ID}:role/EKSNodeRole \
  --subnets $SUBNETS \
  --instance-types t3.micro \
  --scaling-config minSize=1,desiredSize=2,maxSize=3

aws eks wait nodegroup-active \
  --region $REGION \
  --cluster-name lab-eks-${ACCOUNT_ID} \
  --nodegroup-name lab-ng-${ACCOUNT_ID}

# 6. Update kubeconfig
aws eks update-kubeconfig \
  --region $REGION \
  --name lab-eks-${ACCOUNT_ID}

# 7. Deploy NGINX
cat <<EOF > nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.25
        ports:
        - containerPort: 80
EOF

kubectl apply -f nginx-deployment.yaml
kubectl rollout status deployment/nginx-deployment --timeout=120s

# 8. Expose Service
cat <<EOF > nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
EOF

kubectl apply -f nginx-service.yaml

# 9. Verify External IP
echo "Waiting for external IP..."
kubectl get svc nginx-service --watch
# Once IP appears, you can:
# curl http://$(kubectl get svc nginx-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

echo "Deployment complete. Test with curl or browser."


Q3. EKS Provisioning with Flask App Deployment

Problem Description
You will provision a complete Amazon EKS environment in us-west-2 using only the default VPC, default subnets, and public IP access mode, then deploy and expose a simple NGINX application.

Tasks:
IAM Roles
Cluster Role EKSClusterRole for EKS use case EKS - Auto Cluster

Attach managed policies:

AmazonEKSClusterPolicy

AmazonEKSNetworkingPolicy

AmazonEKSBlockStoragePolicy

AmazonEKSComputePolicy

AmazonEKSLoadBalancingPolicy

Node Role EKSNodeRole for EC2

Attach managed policies:

AmazonEC2ContainerRegistryPullOnly

AmazonEC2ContainerRegistryReadOnly

AmazonEKS_CNI_Policy

AmazonEKSWorkerNodePolicy

EKS Cluster Creation
Mode: Manual Configuration

Name: lab-eks-<ACCOUNT_ID>

VPC: Default VPC, default subnets

Cluster endpoint access: Public

Add-ons: Amazon VPC CNI and kube-proxy

Managed Node Group
Name: lab-ng-<ACCOUNT_ID>

Cluster: lab-eks-<ACCOUNT_ID>

IAM role: EKSNodeRole

Instance type: t3.micro and on-demand

Scaling: Min = 1, Desired = 2, Max = 3

Subnets: default

Configure kubectl
Before running anything first do sudo su and put password user@123! and then run the commands:

aws eks update-kubeconfig --region us-west-2 --name lab-eks-<ACCOUNT_ID>
Create & Deploy Flask App
Create flask-deployment.yaml (1-replica Deployment):
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      containers:
      - name: flask
        image: tiangolo/uwsgi-nginx-flask:python3.8
        env:
        - name: MY_MESSAGE
          value: "Hello from EKS!"
        ports:
        - containerPort: 80
use this to apply kubectl apply -f flask-deployment.yaml

Write flask-service.yaml (LoadBalancer Service)

apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  type: LoadBalancer
  selector:
    app: flask
  ports:
  - port: 80
    targetPort: 80
use this to apply kubectl apply -f flask-service.yaml

Check the service and get the external IP:

kubectl get svc flask-service


Ans:

#!/bin/bash
set -e

REGION="us-west-2"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region $REGION)
VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query "Vpcs[0].VpcId" --output text)
SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=default-for-az,Values=true" --query "Subnets[].SubnetId" --output text --region $REGION | sed 's/[[:space:]]/,/g')
SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output text)

# 1. Create the IAM role with trust policy including sts:TagSession
aws iam create-role \
  --role-name EKSClusterRole \
  --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "eks.amazonaws.com"
        },
        "Action": [
          "sts:AssumeRole",
          "sts:TagSession"
        ]
      }
    ]
  }'

# Attach managed policies
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSComputePolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy


# 2. Create the IAM role
aws iam create-role \
  --role-name EKSNodeRole \
  --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "ec2.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
      }
    ]
  }'

# Attach managed policies
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy

# 3. Create cluster
aws eks create-cluster --region $REGION --name lab-eks-${ACCOUNT_ID} --role-arn arn:aws:iam::${ACCOUNT_ID}:role/EKSClusterRole --resources-vpc-config subnetIds=[$SUBNET_IDS],endpointPublicAccess=true,endpointPrivateAccess=false --kubernetes-version 1.33
aws eks wait cluster-active --region $REGION --name lab-eks-${ACCOUNT_ID}

# 4. Install add-ons
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name vpc-cni
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name kube-proxy

# 5. Create node group

aws eks create-nodegroup \
  --region $REGION \
  --cluster-name lab-eks-${ACCOUNT_ID} \
  --nodegroup-name lab-ng-${ACCOUNT_ID} \
  --node-role arn:aws:iam::${ACCOUNT_ID}:role/EKSNodeRole \
  --subnets $SUBNETS \
  --instance-types t3.micro \
  --scaling-config minSize=1,desiredSize=2,maxSize=3

aws eks wait nodegroup-active --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --nodegroup-name lab-ng-${ACCOUNT_ID}

# 6. Update kubeconfig
aws eks update-kubeconfig --region $REGION --name lab-eks-${ACCOUNT_ID}

# 7.

cat <<EOF > flask-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      containers:
      - name: flask
        image: tiangolo/uwsgi-nginx-flask:python3.8
        env:
        - name: MY_MESSAGE
          value: "Hello from EKS!"
        ports:
        - containerPort: 80
EOF

kubectl apply -f flask-deployment.yaml

cat <<EOF > flask-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  type: LoadBalancer
  selector:
    app: flask
  ports:
  - port: 80
    targetPort: 80
EOF

kubectl apply -f flask-service.yaml


Q4. NGINX App Deployment and Rollback

Problem Description
You will provision a complete Amazon EKS environment in us-west-2 using only the default VPC, default subnets, and public IP access mode, then deploy and expose a simple NGINX application.

Tasks:
IAM Roles
Cluster Role named EKSClusterRole for EKS use case EKS - Auto Cluster

Attach managed policies:

AmazonEKSClusterPolicy

AmazonEKSNetworkingPolicy

AmazonEKSBlockStoragePolicy

AmazonEKSComputePolicy

AmazonEKSLoadBalancingPolicy

Node Role named EKSNodeRole for EC2

Attach managed policies:

AmazonEC2ContainerRegistryPullOnly

AmazonEC2ContainerRegistryReadOnly

AmazonEKS_CNI_Policy

AmazonEKSWorkerNodePolicy

EKS Cluster Creation
Mode: Manual Configuration

Name: lab-eks-<ACCOUNT_ID>

VPC: Default VPC, default subnets

Cluster endpoint access: Public

Add-ons: Amazon VPC CNI and kube-proxy

Managed Node Group
Name: lab-ng-<ACCOUNT_ID>

Cluster: lab-eks-<ACCOUNT_ID>

IAM role: EKSNodeRole

Instance type: t3.micro and on-demand

Scaling: Min = 1, Desired = 2, Max = 3

Subnets: default

Configure kubectl
Before running anything first do sudo su and put password user@123! and then run the commands:

aws eks update-kubeconfig --region us-west-2 --name lab-eks-<ACCOUNT_ID>
Create & Deploy NGINX
Write nginx-deployment.yaml (1-replica Deployment) using image nginx:1.21:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
use this to apply kubectl apply -f nginx-deployment.yaml

Write nginx-service.yaml (LoadBalancer Service)

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
use this to apply kubectl apply -f nginx-service.yaml
Simulate Update to v2:
Edit the Deployment to use image nginx:1.23

kubectl set image deployment/nginx-deployment nginx=nginx:1.23
Roll Back Deployment:
Run:
kubectl rollout undo deployment/nginx-deployment
Ensure pods return to nginx:1.21.

Verify Service Still Exposes v1:

kubectl get svc nginx-service
curl http:// should serve nginx:1.21 default page

Ans:

#!/bin/bash
set -e

REGION="us-west-2"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region $REGION)
VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query "Vpcs[0].VpcId" --output text)
SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=default-for-az,Values=true" --query "Subnets[].SubnetId" --output text --region $REGION | sed 's/[[:space:]]/,/g')
SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output text)

# 1. Create the IAM role with trust policy including sts:TagSession
aws iam create-role \
  --role-name EKSClusterRole \
  --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "eks.amazonaws.com"
        },
        "Action": [
          "sts:AssumeRole",
          "sts:TagSession"
        ]
      }
    ]
  }'

# Attach managed policies
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSComputePolicy
aws iam attach-role-policy --role-name EKSClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy


# 2. Create the IAM role
aws iam create-role \
  --role-name EKSNodeRole \
  --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "ec2.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
      }
    ]
  }'

# Attach managed policies
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy

# 3. Create cluster
aws eks create-cluster --region $REGION --name lab-eks-${ACCOUNT_ID} --role-arn arn:aws:iam::${ACCOUNT_ID}:role/EKSClusterRole --resources-vpc-config subnetIds=[$SUBNET_IDS],endpointPublicAccess=true,endpointPrivateAccess=false --kubernetes-version 1.33
aws eks wait cluster-active --region $REGION --name lab-eks-${ACCOUNT_ID}

# 4. Install add-ons
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name vpc-cni
aws eks create-addon --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --addon-name kube-proxy

# 5. Create node group

aws eks create-nodegroup \
  --region $REGION \
  --cluster-name lab-eks-${ACCOUNT_ID} \
  --nodegroup-name lab-ng-${ACCOUNT_ID} \
  --node-role arn:aws:iam::${ACCOUNT_ID}:role/EKSNodeRole \
  --subnets $SUBNETS \
  --instance-types t3.micro \
  --scaling-config minSize=1,desiredSize=2,maxSize=3

aws eks wait nodegroup-active --region $REGION --cluster-name lab-eks-${ACCOUNT_ID} --nodegroup-name lab-ng-${ACCOUNT_ID}

# 6. Update kubeconfig
aws eks update-kubeconfig --region $REGION --name lab-eks-${ACCOUNT_ID}

cat <<EOF > nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
EOF

cat <<EOF >  nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
EOF

kubectl apply -f nginx-deployment.yaml
kubectl apply -f nginx-service.yaml

kubectl set image deployment/nginx-deployment nginx=nginx:1.23
kubectl rollout undo deployment/nginx-deployment
kubectl get svc nginx-service
