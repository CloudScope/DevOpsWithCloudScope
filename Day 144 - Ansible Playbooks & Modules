Q1. Nginx Deployment

In this assignment, you will use Ansible to configure a remote server (server1) as a web server. The objective of this task is to help you understand the basics of remote execution with Ansible by configuring server1 to install and manage an Nginx web server.

Assignment Overview
You are provided with:

An Ansible control container with terminal access (using ttyd) where you will write and run your playbook.
A remote server, server1, which will be configured by your Ansible playbook.
Server Details
Remote Server Hostname: server1
SSH Username: server1_admin
SSH Password: server1_admin@123!
Tasks
Task 1: Update Inventory File
Create or update an Ansible inventory file named inventory.ini inside the directory /home/user/workspace/. This inventory file should include server1 with the provided connection details. It will tell Ansible where and how to connect to server1.

Task 2: Update the Playbook
Create a playbook file named site.yml inside the directory /home/user/workspace/. This playbook should configure server1 as a web server by completing the following tasks:

Install Nginx:
Task name: "Install Nginx"
Use the apt module to install the Nginx package.
Tag this task with nginx.
Start and Enable Nginx Service:
Task name: "Start and enable Nginx service"
Use the service module to start and enable the Nginx service.
This task should ensure that Nginx starts on boot.
Tag this task with nginx.
Create a Custom Welcome Page:
Task name: "Create welcome page"
Use the copy module to create a custom welcome page located at /var/www/html/index.html.
The content of this file should be: "Welcome to Ansible Lab!"
Tag this task with welcome.
Task 3: Run the Playbook
Run the playbook using Ansible to configure server1 as specified. Ensure the playbook executes successfully and performs all tasks.

Command to Run: ansible-playbook -i /home/user/workspace/inventory.ini /home/user/workspace/site.yml
Task 4: Validation and Submission
Once the playbook has been executed, verify that:

Nginx is installed and running on server1.
The custom welcome page exists at /var/www/html/index.html with the correct content.
Submit your lab once all validations are successful.

Important Notes:
File Location: Ensure both inventory.ini and site.yml are created within the /home/user/workspace/ directory.
File Naming: Use exactly inventory.ini for your inventory file and site.yml for your playbook.
Task Names: Use the exact task names specified for each task (e.g., "Install Nginx", "Start and enable Nginx service", and "Create welcome page").
Validation Checks: The playbook should run without errors, and Nginx should be installed and running on server1.
Following this format will ensure that your solution aligns with the validation test cases. Good luck!


Ans:

$ vi inventory.ini 

[all]
server1 ansible_host=server1 ansible_user=server1_admin ansible_ssh_pass=server1_admin@123! ansible_become_pass=server1_admin@123!

vi site.yml 
---
- name: Configure server1 as a web server
  hosts: server1
  become: yes
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: present
      tags:
        - nginx

    - name: Start and enable Nginx service
      service:
        name: nginx
        state: started
        enabled: yes
      tags:
        - nginx

    - name: Create welcome page
      copy:
        content: "Welcome to Ansible Lab!"
        dest: /var/www/html/index.html
        mode: '0644'
      tags:
        - welcome

Q2. Node Testing with Ansible

Node Testing with Ansible
You are provided with:

An Ansible control container with terminal access (using ttyd) where you will write and run your playbook.
A remote server, server1, which will be configured by your Ansible playbook.
Server Details
Remote Server Hostname: server1
SSH Username: server1_admin
SSH Password: server1_admin@123!
Objective
Demonstrate your understanding of Ansible inventory files, group variables, and host variables.

Instructions
Inventory File Setup
Create an inventory directory named inventory/.
Inside the inventory/ directory, create an inventory file named hosts.ini.
Define Hosts
In hosts.ini, define server1 under a group: ini [server] server1 ansible_host=server1 ansible_user=server1_admin ansible_ssh_pass=server1_admin@123!
Group Variables
Inside the inventory/ directory, create a directory named group_vars/.
Create a YAML file named server.yml inside group_vars/ with the following variables: ansible_user: server1_admin ansible_ssh_pass: server1_admin@123!
Host Variables
Inside the inventory/ directory, create a directory named host_vars/.
Create a YAML file named server1.yml inside host_vars/ with specific variables: yaml http_port: 80
Test Variables
Use an ad-hoc command with the debug module to print out the variables http_port on server1.
Verify that the correct variables are displayed for the host.
Challenge Task
Add another group named allservers that includes the server group in the hosts.ini
Use an ad-hoc command to execute uname -a on all hosts in the allservers group.


Ans: 

vi inventory/hosts.ini

[server]
server1 ansible_host=server1 ansible_user=server1_admin ansible_ssh_pass=server1_admin@123!

[webserver]
server1 ansible_host=server1 ansible_user=server1_admin ansible_ssh_pass=server1_admin@123!

[allservers:children]
webservers


Q3. Automated Deployment User Creation with Ansible

Assignment Title: Automated Deployment User Creation with Ansible
Objective:
The purpose of this assignment is to automate the process of creating a new user called deploy on a remote server using Ansible. This user will be equipped with specific configurations such as a predefined home directory and sudo access without a password. This setup is essential for ensuring that automated tasks and deployments can be managed securely and efficiently.

Assignment Requirements:
User Creation:
Automatically create the deploy user across specified managed nodes.
Home Directory Configuration:
Assign a custom home directory to the deploy user.
Sudo Access:
Configure sudo privileges for the deploy user that do not require a password.
Resources Provided:
Access to an Ansible control environment where you can write and run your playbook.
An inventory file that lists the managed nodes, specifically server1, where the user should be created.
Task Instructions:
Step 1: Create the Inventory File
Develop an inventory.ini file that includes the necessary details to connect to server1. This file should not contain sensitive data directly and should look something like this:

server1 ansible_user=server1_admin ansible_ssh_pass='server1_admin@123!' ansible_become=true ansible_become_pass='server1_admin@123!'
Step 2: Write the Ansible Playbook
Create a playbook named playbook.yml with the following specifications:

Header:
name: Describes what the playbook does, making it clear to anyone reading the YAML file.
hosts: Specifies which hosts or groups from the inventory the playbook targets, in this case, all indicating all hosts listed in the inventory.
become: A boolean flag that enables privilege escalation, allowing tasks to run with administrative privileges, which is necessary for user management and file modifications.
Tasks:
User Creation:
user: The Ansible module used for user management.
name: The username to create, here deploy.
comment: A brief description of the user account.
home: Specifies the home directory for the user.
shell: Sets the default shell for the user.
create_home: Ensures that the home directory is created if it does not exist.
groups: Adds the user to specified groups; sudo in this case.
append: Ensures the user is added to specified groups without removing them from other groups.
Sudo Privileges Configuration:
copy: The module used to write a line directly to a file.
content: The line to be written, granting sudo privileges without a password.
dest: The destination path for the file being written.
mode: Sets the permission mode for the file.
validate: Command to validate the syntax of the file to prevent errors.
Step 3: Execute the Playbook
Run the playbook using the command:

ansible-playbook -i inventory.ini playbook.yml

Ans:

vi inventory.ini

[web]
server1 ansible_user=server1_admin ansible_ssh_pass='server1_admin@123!' ansible_become=true ansible_become_pass='server1_admin@123!'

vi playbook.yaml

- name: Configure all servers
  hosts: all
  become: yes
  tasks:
    - name: Create deploy user
      user:
        name: deploy
        comment: "Deploy user account"
        home: /home/deploy
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes

    - name: Configure sudo privileges for deploy user
      copy:
        content: "deploy ALL=(ALL) NOPASSWD:ALL"
        dest: /etc/sudoers.d/deploy
        mode: '0440'
        validate: 'visudo -cf %s'

Q4. Managing the Apache Service

Managing the Apache Service
Develop hosts.ini file that includes the necessary details to connect to server1. This file should not contain sensitive data directly and should look something like this:

server1 ansible_user=server1_admin ansible_ssh_pass='server1_admin@123!' ansible_become=true ansible_become_pass='server1_admin@123!'
Tasks
Create a playground.yml and it should configure server1 to operate as an Apache web server.

Install Apache:

Module: Use the apt module to install the Apache package (apache2).

State: Ensure Apache is in the 'present' state, which will install it if it's not already installed.

Tags: Tag this task as apache for easy identification and management.

Start and Enable Apache Service:

Module: Use the service module for managing the Apache service.

Service Name: apache2

State: Ensure the Apache service is 'started'.

Enabled: Set to 'true' to ensure Apache starts on boot.

Tags: This task should also be tagged as apache.

Create a Custom Welcome Page:

Module: Use the copy module to create or replace the content of the welcome page.

Destination: The file should be placed at /var/www/html/index.html.

Content: The welcome page should contain the text "Welcome to Ansible Lab!"

Tags: Tag this task as welcome.

Ans:

vi playground.yml

---
- name: Configure server1 as an Apache web server
  hosts: server1
  become: yes
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: present
      tags:
        - apache

    - name: Start and enable Apache service
      service:
        name: apache2
        state: started
        enabled: yes
      tags:
        - apache

    - name: Create a custom welcome page
      copy:
        dest: /var/www/html/index.html
        content: "Welcome to Ansible Lab!"
        mode: '0644'
      tags:
        - welcome

Q5. Ansible Class 2 Assignment 5

Package Management Across Environments
Objective:
Your team manages multiple servers running different Linux distributions. You need to automate the installation of specific software packages across all the servers. But for now we need to install on server_1

Setup hosts.ini before attempting the task:
server1 ansible_user=server1_admin ansible_ssh_pass='server1_admin@123!' ansible_become=true ansible_become_pass='server1_admin@123!'
Instructions:
Write a playbook that installs curl and git on server1.
Ensure that the playbook checks whether the packages are already installed and only installs them if necessary.
The playbook should work regardless of the Linux distribution, using conditionals where appropriate.

Ans:

---
- name: Install curl and git on server1
  hosts: server1
  become: yes
  tasks:
    - name: Determine package manager
      ansible.builtin.set_fact:
        pkg_mgr: "{{ 'apt' if ansible_os_family == 'Debian' else 'dnf' if ansible_os_family == 'RedHat' else 'yum' }}"

    - name: Install curl and git (Debian-based)
      apt:
        name:
          - curl
          - git
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      tags:
        - install

    - name: Install curl and git (RedHat-based)
      yum:
        name:
          - curl
          - git
        state: present
      when: ansible_os_family == "RedHat"
      tags:
        - install

$ ansible-playbook -i hosts.ini playboo.yml
