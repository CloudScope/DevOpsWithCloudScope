Q1. ADD OR NOT

Problem Description

Given an array of integers A of size N and an integer B.

In a single operation, any one element of the array can be increased by 1. You are allowed to do at most B such operations.

Find the number with the maximum number of occurrences and return an array C of size 2, where C[0] is the number of occurrences, and C[1] is the number with maximum occurrence.
If there are several such numbers, your task is to find the minimum one.



Problem Constraints

1 <= N <= 105

-109 <= A[i] <= 109

0 <= B <= 109



Input Format

The first argument given is the integer array A.
The second argument given is the integer B.



Output Format

Return an array C of size 2, where C[0] is number of occurence and C[1] is the number with maximum occurence.



Example Input

Input 1:

 A = [3, 1, 2, 2, 1]
 B = 3
Input 2:

 A = [5, 5, 5]
 B = 3


Example Output

Output 1:

 [4, 2]
Output 2:

 [3, 5]

Ans:


class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return a list of integers
    def solve(self, A, B):
        A.sort()
        N = len(A)
        
        left = 0
        max_count = 0
        max_number = float('inf')
        total_operations = 0
    
        for right in range(N):
            if right > 0:
                total_operations += (A[right] - A[right - 1]) * (right - left)
    
            while total_operations > B:
                total_operations -= A[right] - A[left]
                left += 1
    
            count = right - left + 1
            if count > max_count or (count == max_count and A[right] < max_number):
                max_count = count
                max_number = A[right]
    
        return [max_count, max_number]


Q2. Find Smallest Again

Given an integer array A of size N.

If we store the sum of each triplet of the array A in a new list, then find the Bth smallest element among the list.

NOTE: A triplet consists of three elements from the array. Let's say if A[i], A[j], A[k] are the elements of the triplet then i < j < k.



Problem Constraints

3 <= N <= 500
1 <= A[i] <= 108
1 <= B <= (N*(N-1)*(N-2))/6



Input Format

The first argument is an integer array A.
The second argument is an integer B.



Output Format

Return an integer denoting the Bth element of the list.



Example Input

Input 1:

 A = [2, 4, 3, 2]
 B = 3
Input 2:

 A = [1, 5, 7, 3, 2]
 B = 9


Example Output

Output 1:
 9 
Output 2:
 14

Ans:

def countTripletsLessThanOrEqual(A, mid):
    N = len(A)
    count = 0
    # Iterate over the first element of the triplet
    for i in range(N - 2):
        left, right = i + 1, N - 1
        while left < right:
            if A[i] + A[left] + A[right] <= mid:
                count += (right - left)  # All (left, right) pairs are valid
                left += 1  # Move left pointer to explore more triplets
            else:
                right -= 1  # Reduce the sum by moving the right pointer
    return count

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        A.sort()  # Sort the array first
        low, high = A[0] + A[1] + A[2], A[-1] + A[-2] + A[-3]
        while low < high:
            mid = (low + high) // 2
            if countTripletsLessThanOrEqual(A, mid) >= B:
                high = mid  # Search in the lower half
            else:
                low = mid + 1  # Search in the upper half
        return low


Q3. Matrix Median

Problem Description

Given a matrix of integers A of size N x M in which each row is sorted.


Find and return the overall median of matrix A.

NOTE: No extra memory is allowed.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints

1 <= N, M <= 10^5

1 <= N*M <= 10^6

1 <= A[i] <= 10^9

N*M is odd



Input Format

The first and only argument given is the integer matrix A.



Output Format

Return the overall median of matrix A.



Example Input

Input 1:

A = [   [1, 3, 5],
        [2, 6, 9],
        [3, 6, 9]   ] 
Input 2:

A = [   [5, 17, 100]    ]


Example Output

Output 1:

 5 
Output 2:

 17


Ans:

from bisect import bisect_right
class Solution:
    # @param A : list of list of integers
    # @return an integer
    def binSearch(self, matrix, min_el, max_el, cntElBeforeMed):
        start = min_el
        end = max_el
        while start < end:
            mid = start + ((end - start) // 2)
            cnt = 0
            for row in matrix:
                cnt += bisect_right(row, mid)
            if cnt > cntElBeforeMed:
                end = mid
            else:
                start = mid + 1
        
        return start
    
    def getMinMax(self, matrix):
        min_el = float('inf')
        max_el = float('-inf')
        for row in matrix:
            if min_el > row[0]:
                min_el = row[0]
            if max_el < row[-1]:
                max_el = row[-1]
        
        return min_el, max_el
    
    def findMedian(self, A):
        matrix = A
        rn = len(matrix)
        cn = len(matrix[0])
        cntElBeforeMed = (rn * cn) // 2
        min_el, max_el = self.getMinMax(matrix)
        return self.binSearch(matrix, min_el, max_el, cntElBeforeMed)

