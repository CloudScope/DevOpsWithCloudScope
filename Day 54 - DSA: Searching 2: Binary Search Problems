Q2. Find Smallest Again

Given an integer array A of size N.

If we store the sum of each triplet of the array A in a new list, then find the Bth smallest element among the list.

NOTE: A triplet consists of three elements from the array. Let's say if A[i], A[j], A[k] are the elements of the triplet then i < j < k.



Problem Constraints

3 <= N <= 500
1 <= A[i] <= 108
1 <= B <= (N*(N-1)*(N-2))/6



Input Format

The first argument is an integer array A.
The second argument is an integer B.



Output Format

Return an integer denoting the Bth element of the list.



Example Input

Input 1:

 A = [2, 4, 3, 2]
 B = 3
Input 2:

 A = [1, 5, 7, 3, 2]
 B = 9


Example Output

Output 1:
 9 
Output 2:
 14

Ans:

def countTripletsLessThanOrEqual(A, mid):
    N = len(A)
    count = 0
    # Iterate over the first element of the triplet
    for i in range(N - 2):
        left, right = i + 1, N - 1
        while left < right:
            if A[i] + A[left] + A[right] <= mid:
                count += (right - left)  # All (left, right) pairs are valid
                left += 1  # Move left pointer to explore more triplets
            else:
                right -= 1  # Reduce the sum by moving the right pointer
    return count

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        A.sort()  # Sort the array first
        low, high = A[0] + A[1] + A[2], A[-1] + A[-2] + A[-3]
        while low < high:
            mid = (low + high) // 2
            if countTripletsLessThanOrEqual(A, mid) >= B:
                high = mid  # Search in the lower half
            else:
                low = mid + 1  # Search in the upper half
        return low
